@startuml
' Define the interface for patient interaction
interface "Interface Patient" as PatientUI

' Define the interface for doctor interaction
interface "Interface Médecin" as DoctorUI

' Define the main component managing medical records
component "Gestion des Dossiers Médicaux" as MRManagement {
  ' Define the port for medical data collection
  port "collectData" as CollectDataPort
}

' Define the database component
database "Base de Données Centralisée" as Database

' Connect interfaces and components
PatientUI - CollectDataPort : use
DoctorUI - CollectDataPort : use

' Define the component for the RAMQ system
component "Système RAMQ" as RAMQSystem {
  ' Define the port for RAMQ data management
  port "manageRAMQData" as ManageRAMQDataPort
}

' Define the component for archiving modifications
component "Système d'Archivage" as ArchiveSystem {
  ' Define the port for archiving data
  port "archiveData" as ArchiveDataPort
}

' Show relationships between components and database
MRManagement -down-> Database : lecture/écriture
RAMQSystem -down-> Database : lecture/écriture

' Show relationships for archiving data
ArchiveSystem -left-> MRManagement : archive les modifications
RAMQSystem -left-> ArchiveSystem : reconstruit le dossier

' You can add details about patient and doctor workstations if needed
component "Poste de Travail Médecin" as DoctorWorkstation
component "Application Patient" as PatientApp

' Show interactions between the user interfaces and workstations
PatientUI <-down-> PatientApp : utilise
DoctorUI <-down-> DoctorWorkstation : utilise

' Display the relationships
DoctorWorkstation -down-> MRManagement : utilise
PatientApp -down-> MRManagement : utilise

' Display the relationship between RAMQ system and archive system
RAMQSystem -down-> ArchiveSystem : utilise

@enduml
